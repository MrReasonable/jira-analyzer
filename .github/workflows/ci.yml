name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e-tests-checks:
    name: E2E Tests Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: "10.5.2"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Lint e2e-tests
        run: make e2e-lint-ci

      - name: Check e2e-tests formatting
        run: make e2e-format-check-ci

      - name: Type check e2e-tests
        run: make e2e-type-check-ci

  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: "10.5.2"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install system dependencies for canvas
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install pkg-config cairo pango libpng jpeg giflib librsvg
          fi
        shell: bash

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          # Clean any existing node_modules to avoid dependency conflicts
          rm -rf node_modules
          # Force reinstall with platform-specific dependencies
          pnpm install --force

          # Explicitly install the missing optional dependency for rollup
          if [ "$RUNNER_OS" == "Linux" ]; then
            # For Linux runners, ensure the correct platform-specific package is installed
            pnpm add -D @rollup/rollup-linux-x64-gnu
          fi

      - name: Lint frontend
        working-directory: ./frontend
        run: |
          echo "Running frontend linting"
          pnpm run lint

      - name: Check frontend formatting
        working-directory: ./frontend
        run: |
          echo "Checking frontend formatting"
          pnpm run format:check

      - name: Type check frontend
        working-directory: ./frontend
        run: pnpm run type-check

      - name: Test frontend
        working-directory: ./frontend
        run: |
          echo "Running frontend tests"
          pnpm run test

  backend-checks:
    name: Backend Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Setup Python virtual environment
        working-directory: ./backend
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          pip install -r requirements.txt

      - name: Lint backend with Ruff
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          pip install ruff
          ruff check app tests

      - name: Format backend with Ruff
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          pip install ruff
          echo "Formatting files with Ruff"
          ruff format app tests
          echo "Verifying formatting"
          ruff format --check app tests

      - name: Type check backend with MyPy
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          pip install mypy
          echo "Running type checking with MyPy"
          mypy app --exclude=app/migrations --ignore-missing-imports

      - name: Security check with Bandit
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          pip install bandit[toml]
          bandit -c pyproject.toml -r app

      - name: Run backend unit tests
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          echo "Running backend unit tests"
          pytest tests/unit -v

      - name: Run backend integration tests
        working-directory: ./backend
        run: |
          . .venv/bin/activate
          echo "Running backend integration tests"
          pytest tests/test_config.py tests/test_input_validation.py \
            tests/test_metric_calculations.py tests/test_api_metrics.py -v

  yaml-checks:
    name: YAML Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build yamlfmt Docker image
        run: docker build -t yamlfmt -f Dockerfile.yamlfmt .

      - name: Check YAML formatting
        run: make yaml-format-check-ci

  docker-build-test:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [e2e-tests-checks, frontend-checks, backend-checks, yaml-checks]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          load: true
          tags: jira-analyzer-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          load: true
          tags: jira-analyzer-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
