services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development-enhanced
    container_name: jira-analyzer-backend-dev
    # Only expose debug port, API access should be through Caddy
    ports:
      - "5678:5678"  # Python debugger port
    expose:
      - "8000"  # Expose to other containers, but not to host
    environment:
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=["http://localhost:${FRONTEND_PORT:-80}", "http://localhost:5173", "http://caddy:80"]
      # Development Configuration
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # Mock Jira for testing
      - USE_MOCK_JIRA=${USE_MOCK_JIRA:-true}
    volumes:
      - ./backend:/app
      - jira-analyzer-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development-nonroot
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: jira-analyzer-frontend-dev
    # Only expose debug port, web access should be through Caddy
    ports:
      - "9229:9229"  # Node.js debugger port
    expose:
      - "5173"  # Expose to other containers, but not to host
    environment:
      - VITE_API_URL=/api
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

  caddy:
    image: caddy:2-alpine
    container_name: jira-analyzer-caddy-dev
    ports:
      - "${FRONTEND_PORT:-80}:80"  # HTTP port
      - "443:443"  # HTTPS port
    volumes:
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend

volumes:
  jira-analyzer-data:
  caddy_data:    # Persistent volume for Caddy SSL certificates
  caddy_config:  # Persistent volume for Caddy configuration

networks:
  default:
    name: jira-analyzer-network-dev
