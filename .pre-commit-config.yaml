repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key

  # Backend Python hooks
  - repo: local
    hooks:
      - id: backend-lint-fix
        name: Backend Lint Fix
        entry: bash -c 'echo "Running backend linting and type checking" && make backend-lint-fix-ci || { echo "Backend lint check failed"; exit 1; }'
        language: system
        files: ^backend/.*\.py$
        exclude: ^backend/app/migrations/
        types: [file]
        pass_filenames: false

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
      - id: mypy
        files: ^backend/
        exclude: ^backend/(app/migrations/|tests/unit/conftest\.py)
        args:
          [
            --explicit-package-bases,
            --namespace-packages,
            --ignore-missing-imports,
          ]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.3
    hooks:
      - id: bandit
        args: ["-c", "backend/pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        files: ^backend/
        exclude: ^backend/app/migrations/

  # Frontend hooks
  - repo: local
    hooks:
      - id: frontend-lint
        name: Frontend ESLint
        entry: bash -c 'echo "Running ESLint for frontend" && make frontend-lint-fix-ci || { echo "ESLint check failed"; exit 1; }'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        types: [file]
        pass_filenames: false

      - id: frontend-format
        name: Frontend Prettier
        entry: bash -c 'echo "Running Prettier for frontend" && make frontend-format-ci || { echo "Prettier check failed"; exit 1; }'
        language: system
        files: ^frontend/.*\.(ts|tsx|css|json)$
        types: [file]
        pass_filenames: false

      - id: frontend-type-check
        name: Frontend TypeScript
        entry: bash -c 'echo "Running TypeScript check" && cd frontend && pnpm run type-check || { echo "TypeScript check failed"; exit 1; }'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        types: [file]
        pass_filenames: false

      - id: frontend-test
        name: Frontend Tests
        entry: bash -c 'echo "Running frontend tests" && make frontend-test-ci || { echo "Frontend tests failed"; exit 1; }'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        types: [file]
        pass_filenames: false

      - id: backend-test
        name: Backend Unit Tests
        entry: bash -c 'echo "Running backend unit tests" && make backend-unit-test-ci || { echo "Backend tests failed"; exit 1; }'
        language: system
        files: ^backend/.*\.py$
        exclude: ^backend/app/migrations/
        types: [file]
        pass_filenames: false

  # E2E Tests hooks
  - repo: local
    hooks:
      - id: e2e-lint
        name: E2E Tests ESLint
        entry: bash -c 'echo "Running ESLint for E2E tests" && cd e2e-tests && pnpm run lint:strict || { echo "ESLint check failed"; exit 1; }'
        language: system
        files: ^e2e-tests/.*\.(ts|tsx)$
        types: [file]
        pass_filenames: false

      - id: e2e-format
        name: E2E Tests Prettier
        entry: bash -c 'echo "Running Prettier for E2E tests" && make e2e-format-ci || { echo "Prettier check failed"; exit 1; }'
        language: system
        files: ^e2e-tests/.*\.(ts|tsx|json)$
        types: [file]
        pass_filenames: false

      - id: e2e-type-check
        name: E2E Tests TypeScript
        entry: bash -c 'echo "Running TypeScript check for E2E tests" && cd e2e-tests && pnpm run type-check || { echo "TypeScript check failed"; exit 1; }'
        language: system
        files: ^e2e-tests/.*\.(ts|tsx)$
        types: [file]
        pass_filenames: false

  # YAML formatting hooks
  - repo: local
    hooks:
      - id: yaml-format
        name: YAML Format
        entry: bash -c 'echo "Running YAML formatting" && make yaml-format-ci || { echo "YAML formatting failed"; exit 1; }'
        language: system
        files: \.(yml|yaml)$
        types: [file]
        pass_filenames: false

  # Markdown linting hooks
  - repo: local
    hooks:
      - id: markdown-lint
        name: Markdown Lint
        entry: bash -c 'echo "Running Markdown linting" && make markdown-lint-ci || { echo "Markdown linting failed"; exit 1; }'
        language: system
        files: \.md$
        types: [file]
        exclude: node_modules/
        pass_filenames: false
