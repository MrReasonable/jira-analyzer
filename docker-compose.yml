services:
  postgres:
    image: postgres:16-alpine
    container_name: jira-analyzer-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=jira_analyzer
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: jira-analyzer-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=["http://localhost:${FRONTEND_PORT:-80}"]
      # Database Configuration
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=jira_analyzer
    volumes:
      - ./backend/app:/app/app
      - ./backend/tests:/app/tests
      - jira-analyzer-data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: nginx
    container_name: jira-analyzer-frontend
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-8000}
    volumes:
      - frontend_build:/app/dist

  caddy:
    image: caddy:2-alpine
    container_name: jira-analyzer-caddy
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "443:443"
    volumes:
      - frontend_build:/usr/share/caddy
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  jira-analyzer-data:
  postgres-data: # Persistent volume for PostgreSQL data
  frontend_build: # Shared volume between frontend build and Caddy
  caddy_data: # Persistent volume for Caddy SSL certificates
  caddy_config: # Persistent volume for Caddy configuration

networks:
  default:
    name: jira-analyzer-network
